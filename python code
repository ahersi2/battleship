#Name: Abdurahman Hersi
import random
from stack import Stack


#IMPORTANT, !!my stack.isEmpty method might be different from the one provided. If error appears, it is because it is different from the one we used in labs, only by its spelling.


# -----------------------------------------------------------------------------
# Battleship Game - Assignment 5 - CMPUT 175 - Winter 2016
# -----------------------------------------------------------------------------

class BattleshipGame:
    def __init__(self):
        self.computerShips = {"A":5,
            "B":4,
                "S":3,
                    "D":3,
                        "P":2}
        self.userShips = {"A":5,
            "B":4,
                "S":3,
                    "D":3,
                        "P":2}
        self.shipsName = {'A': 'Aircraft Carrier',
            'B': 'Battleship',
                'S':'Submarine',
                    'D':'Destroyer',
                        'P':'Patrol Boat'}
        
        #setup blank 10x10 board
        self.userBoard=[[" " for i in range(10)] for j in range(10)]
        self.computerBoard=[[" " for i in range(10)] for j in range(10)]
        self.rounds=0
        self.comphits=0
        self.userhits=0
        self.usermiss=0
                            self.compmiss=0



# ---------------------------------------------------------------------------
def drawBoards(self,hide):
    user_shipssunk=self.getEnemyFleet(True)[1]
        comp_shipssunk=self.getEnemyFleet(False)[1]
        print ("    Computer's board:         User's board:          at round: "+str(self.rounds))
        print ("    1 2 3 4 5 6 7 8 9 10      1 2 3 4 5 6 7 8 9 10                 Computer Status:    User Status:")
        labels=['A','B','C','D','E','F','G','H','I','J']
        for i in range(10):
            print (" %c |" % (labels[i]), end="")   # Computer's board
            #print the board values, and cell dividers
            for j in range(10):
                if self.computerBoard[i][j] == "*" or self.computerBoard[i][j] == "#" or not hide:
                    print (self.computerBoard[i][j]+"|", end="")
                else:
                    print (' |', end="")
            print ("   %c |" % (labels[i]), end="") # User's board
            #print the board values, and cell dividers
            for j in range(10):
                print (self.userBoard[i][j]+"|",end='')
    if i==0:
        print('   Nbr. of hits:   {:<19}{}'.format(self.getHits(True),self.getHits(False)),end='')
            elif i==1:
                print('   Nbr. of misses: {:<19}{}'.format(self.getMisses(True),self.getMisses(False)),end='')
        elif i==2:
            print('   Ships sunk :    {:<19}{}'.format(len(comp_shipssunk),len(user_shipssunk)),end='')
            elif i in range(3,8):
                index = i-3
                if index < len(comp_shipssunk):
                    print('{:<19}{:<18}'.format(' ', self.shipsName[comp_shipssunk[index]]), end = '')
                else:
                    print('{:<19}{:<18}'.format(' ', ' '), end = '')
                if index < len(user_shipssunk):
                    print(self.shipsName[user_shipssunk[index]], end = '')
                else:
                    print('', end = '')

print("")
    
    
    
    # ---------------------------------------------------------------------------
    def validatePlacement(self,computer,ship,size,x,y,ori):
        
        #validate the ship can be placed at the given coordinates
        # and places it if acceptable
        if ori == "v" and x+size > 10:
            return False
        elif ori == "h" and y+size > 10:
            return False
        else:
            if computer:
                board=self.computerBoard
            else:
                board=self.userBoard
            if ori == "v":
                for i in range(size):
                    if board[x+i][y] != " ":
                        return False
            elif ori == "h":
                for i in range(size):
                    if board[x][y+i] != " ":
                        return False
            # announce the ship to be placed
            if computer:
                print ("Computer placing a " + ship)
            else:
                print ("You placed a " + ship)
            #place the ship based on valid orientation and coordinates
            if ori == "v":
                for i in range(size):
                    board[x+i][y] = ship[0]
            else: # ori=="h"
                for i in range(size):
                    board[x][y+i] = ship[0]
        return True

    # ---------------------------------------------------------------------------
    def getEnemyFleet(self, computer):
        # returns a list of two lists. The first one has the sunken ships and the second the ships to sink
        if computer:
            fleet=self.userShips
        else:
            fleet=self.computerShips
        toSink=[]
        sunk=[]
        # check all ships in the armada of ennemy in the game instance
        for ship in fleet.keys():
            if fleet[ship]==0:
                sunk.append(ship)
            else:
                toSink.append(ship)
        return [toSink,sunk]

    # ---------------------------------------------------------------------------
    def checkWinning(self, computer):
        # Check if there are still any pieces of ships left to hit on the board
        # board refers to either the board of the computer (if user is playing) or the user (if computer is playing)
        if computer:
            board=self.userBoard
        else:
            board=self.computerBoard
        # Loop to check all cells in the board
        # if any cell contains a char that is not empty, a miss or a hit return false
        for i in range(10):
            for j in range(10):
                if board[i][j] != ' ' and board[i][j] != '*' and board[i][j] != '#':
                    return False
        return True

    # ---------------------------------------------------------------------------

    def makeA_Move(self, computer, x,y):
        if computer:
            board=self.userBoard
        else:
            board=self.computerBoard
        old=board[x][y]
        if old==" ":
            board[x][y]="*"
            if board==self.userBoard:
                self.compmiss+=1
            else:
                self.usermiss+=1
        elif old=="*" or old=="#":
            return old
        else:
            board[x][y]="#"
            if board==self.computerBoard:
                self.userhits+=1
            else:
                self.comphits+=1
        return old
    # ---------------------------------------------------------------------------

    def checkIfSunk(self, computer,symbol):
        if computer:
            armada=self.userShips
        else:
            armada=self.computerShips
        
        # reduce size left of hit ship and check if sunk
        armada[symbol] -= 1
        if armada[symbol] == 0:
            return True
        return False

    def getHits(self,computer):
        if computer:
            if self.comphits<10:
                hits='0'+str(self.comphits)
            else:
                hits=str(self.comphits)
        else:
            if self.userhits<10:
                hits='0'+str(self.userhits)
            else:
                hits=self.userhits
        return hits
    
    def getMisses(self,computer):
        if computer:
            if self.compmiss<10:
                miss='0'+str(self.compmiss)
            else:
                miss=str(self.compmiss)
        else:
            if self.usermiss<10:
                miss='0'+str(self.usermiss)
            else:
                miss=str(self.usermiss)
        return miss
    
    def incrementRounds(self):
        #rounds are incremented by 1
        self.rounds=self.rounds+1

    def getship_Size(self,symbol):
        return self.userShips[symbol]


    def darkBoard(self):
        #the darkboard is created. Hunt phase works on the dark board beginning from the smallest size ship available
        unsunk_ships=self.getEnemyFleet(True)[0]
        board=self.userBoard
        smallest_ship=100
        for i in unsunk_ships:
            size=self.userShips[i]
            if size< smallest_ship:
                smallest_ship=size
        dark_coordinates=[]
        for x in range(0,10):
            if x%2==0:
                a=0
            else:
                a=1
            for y in range(a,10,smallest_ship):
                if board[x][y]!='*' or board[x][y]!='#':
                    dark_coordinates.append([x,y])
        return dark_coordinates




# ---------------------------------------------------------------------------
def computerPlaceShips(game,ships):
    # Placing the computer ships in random positions
    for ship in ships.keys():
        #generate random coordinates and validate the postion
        valid = False
        while(not valid):
            x = random.randint(1,10)-1
            y = random.randint(1,10)-1
            o = random.randint(0,1)
            if o == 0:
                ori = "v"
            else:
                ori = "h"
            valid = game.validatePlacement(True,ship,ships[ship],x,y,ori)

# ---------------------------------------------------------------------------
def userPlaceShips(game,ships):
    # Placing the user ships after asking the coordinates and the orientation of each
    # Coordinates are for the bow
    for ship in ships.keys():
        #get coordinates from user and vlidate the postion
        valid = False
        while(not valid):
            game.drawBoards(True)
            print ("Placing a", ship, "of size", ships[ship])
            # reading coordinates x y of new ship
            shipCoordinates=readCoordinates()
            x=shipCoordinates[0]
            y=shipCoordinates[1]
            # reading orientation of new ship
            validOrientation=False
            while not validOrientation:
                orientation=input("This ship is vertical or horizontal (v,h)? ").lower()
                if orientation == "v" or orientation == "h":
                    validOrientation=True
            valid = game.validatePlacement(False,ship,ships[ship],x,y,orientation)
            if not valid:
                print ("Cannot place a", ship, "there. Stern is out of the board or collides with other ship.\nPlease take a look at the board and try again.")
                input("Hit ENTER to continue")

game.drawBoards(False)         # DEBUGGING: Cheating to see where the computer ships are
    input("Done placing user ships. Hit ENTER to continue")

# ---------------------------------------------------------------------------
def readCoordinates():
    # read coordinates x y on board from user and validate
    validCoordinates=False
    while not validCoordinates:
        cell=input("Enter coordinates x y (x in [A..J] and y in [1..10]):")
        cell=cell.split()
        if len(cell)==2:
            if cell[0].upper() in ['A','B','C','D','E','F','G','H','I','J'] and cell[1].isdigit():
                x=['A','B','C','D','E','F','G','H','I','J'].index(cell[0].upper())
                y=int(cell[1])-1
                if x>=0 and x<=9 and y>=0 and y<=9:
                    validCoordinates=True
    return [x,y]
# ---------------------------------------------------------------------------
def userMakesMove(game):
    # ask for coordinates for a move by user and try to make move
    # if move is a hit, check ship sunk and win condition
    # return if user won
    moveLigit=False
    while(not moveLigit):
        move=readCoordinates()
        x=move[0]
        y=move[1]
        beforeDropped = game.makeA_Move(False,x,y)
        #displaying current boards
        game.drawBoards(True)
        labels=['A','B','C','D','E','F','G','H','I','J']
        if beforeDropped=="*" or beforeDropped == "#":
            print ("Sorry, " + labels[x] + " " + str(y+1) + " was already played. Try again.")
        elif beforeDropped == " ":
            print ("Sorry, " + labels[x] + " " + str(y+1) + " is a miss.")
            moveLigit=True
        else:
            print ("Hit at " + labels[x] + " " + str(y+1))
            if game.checkIfSunk(False,beforeDropped):
                print (whatShip(beforeDropped) + " sunk")
            moveLigit=True
    #    input("Press RETURN to continue")
return game.checkWinning(False)

# ----------------------------------------------------------------------
def computer_Hunt(game,hunt,size,stack):
    # generate coordinates for a move by computer and try to make move
    # if move is a hit, check ship sunk and win condition
    # return if computer won
    #computer begins hunt phase, hitting only the darkboard
    moveLigit=False
    while(not moveLigit):
        dark_cells=game.darkBoard()
            dark_cell=random.choice(dark_cells)
            x=dark_cell[0]
            y=dark_cell[1]
            beforeDropped = game.makeA_Move(True,x,y)
            game.drawBoards(True)
            labels=['A','B','C','D','E','F','G','H','I','J']
            if beforeDropped=="*" or beforeDropped == "#":
                moveLigit=False
        elif beforeDropped == " ":
            print ("Sorry computer, " + labels[x] + " " + str(y+1) + " is a miss.")
                moveLigit=True
            else:
                print ("Computer did a Hit at " + labels[x] + " " + str(y+1))
                if game.checkIfSunk(True,beforeDropped):
                    print (whatShip(beforeDropped) + " sunk")
                if beforeDropped in game.getEnemyFleet(True)[0]:
                    size=game.getship_Size(beforeDropped)
                    stack.push(beforeDropped)
                    hunt=False
                    moveLigit=True

                        return game.checkWinning(True),hunt,[x,y,beforeDropped],stack,size

def target_stack(game,move,stack):
    #pushes in the adjacent squares
    x=move[0]
        y=move[1]
        before_drop=move[2]
        locations=[(x-1,y),(x+1,y),(x,y-1),(x,y+1)]
        for i in locations:
            if i[0]in range(0,10)and i[1]in range(0,10)and before_drop!='*'or before_drop!='#':
                stack.push(i)
    return stack


def computer_target(game,move,stack,hunt,size,hits_stack):
    #this is the target phase where the computer ppops surrounding locations from the stack
    move_Legit=False
    while (not move_Legit):
        if not stack.isEmpty():
            location=stack.pop()
            x=location[0]
            y=location[1]
            comp_move=game.makeA_Move(True,x,y)
            labels=['A','B','C','D','E','F','G','H','I','J']
            if comp_move=="*" or comp_move == "#":
                move_Legit=False
            elif comp_move == " ":
                print ("Sorry computer, " + labels[x] + " " + str(y+1) + " is a miss.")
                move_Legit=True
            else:
                print ("Computer did a Hit at " + labels[x] + " " + str(y+1))
                if game.checkIfSunk(True,comp_move):
                    print (whatShip(comp_move) + " sunk")
                    for i in range(size):
                        hits_stack.pop()
                    if hits_stack.isEmpty():
                        hunt=True
                move_Legit=True
            if comp_move in game.getEnemyFleet(True)[0]:
                move=[x,y,comp_move]
                size=game.getship_Size(comp_move)
                hits_stack.push(comp_move)
                stack=target_stack(game,move,stack)
            game.drawBoards(True)








return game.checkWinning(True),hunt,move







# ----------------------------------------------------------------------
def whatShip(symbol):
    # converting the symbol of a ship to the full name and returning it
    if symbol == "A":
        ship = "Aircraft Carrier"
    elif symbol == "B":
        ship = "Battleship"
    elif symbol == "S":
        ship = "Submarine"
    elif symbol == "D":
        ship = "Destroyer"
    elif symbol == "P":
        ship = "Patrol Boat"
    return ship

# #############################################################################
def main():
    ships = {"Aircraft Carrier":5,
        "Battleship":4,
            "Submarine":3,
                "Destroyer":3,
                    "Patrol Boat":2}
    game=BattleshipGame()                   # create instance of the game
    computerPlaceShips(game,ships)          # Computer places its armada
    userPlaceShips(game,ships)              # User places the armada

    gameOver=False
    hunt= True
    target_mode=Stack()
    hits_stack=Stack()
    ship_size=""
    # game main loop
    while(not gameOver):
        game.incrementRounds()
        #user move
        winning=userMakesMove(game)
        
        #check if user won
        if winning:
            print ("Congratulations! User WON!")
            gameOver=True
        else:
            # display what remains of the fleet
            armada=game.getEnemyFleet(False)
            print ("Ships to sink:[", end="")
            for ship in armada[0]:
                print (whatShip(ship), " ", end="")
            print ("]  Ships sunk:[",end="")
            for ship in armada[1]:
                print (whatShip(ship), " ", end="")
            print("]")

            #computer move
            # computer begins hunt phase
            if hunt:
                comp_winning=computer_Hunt(game,hunt,ship_size,hits_stack)
                last_move=comp_winning[2]
                hunt=comp_winning[1]
                hits_stack=comp_winning[3]
                ship_size=comp_winning[4]
                target_ship=target_stack(game,last_move,target_mode)
            #computer goes into target phase
            else:
                comp_winning=computer_target(game,last_move,target_ship,hunt,ship_size,hits_stack)
                hunt=comp_winning[1]
                last_move=comp_winning[2]




            #check if computer won
            if comp_winning[0]:
                print ("Sorry! Computer WON! Here is what the board looked like:")
                # display boards without hiding the computer ships
                game.drawBoards(False)
                input("Press ENTER to continue")
                gameOver=True

# #############################################################################

if __name__=="__main__":
    main()
